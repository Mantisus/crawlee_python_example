[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "afs_crowlee"
version = "1.0.0"
description = 'Example of a crawlee-python based crawler to extract data from accommodationforstudents using Next.js'
readme = "README.md"
requires-python = ">=3.12"
keywords = [
  "apify",
  "crawlee",
  "crawler",
  "scraper"
  ]

authors = [
  { name = "Mantisus", email = "moriturus7@gmail.com"},
]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "orjson>=3.10.7,<4.0.0",
    "crawlee[curl-impersonate]>=0.2.1,<0.3.0"
]

[project.optional-dependencies]
dev = [
    "black>=24.4.2",
    "mypy>=1.10.0",
    "ruff>=0.4.4",
    "isort>=5.13.2",
    "pre-commit>=3.7.1",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
target-version = ["py312"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `{name}` in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {filename}
    "BLE001",  # Do not catch blind exception
    "C901",    # `{name}` is too complex
    "COM812",  # This rule may cause conflicts when used with the formatter
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in `__init__`
    "EM",      # flake8-errmsg
    "G004",    # Logging statement uses f-string
    "ISC001",  # This rule may cause conflicts when used with the formatter
    "FIX",     # flake8-fixme
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR0911", # Too many return statements
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PTH",     # flake8-use-pathlib
    "PYI034",  # `__aenter__` methods in classes like `{name}` usually return `self` at runtime
    "PYI036",  # The second argument in `__aexit__` should be annotated with `object` or `BaseException | None`
    "S102",    # Use of `exec` detected
    "S105",    # Possible hardcoded password assigned to
    "S106",    # Possible hardcoded password assigned to argument: "{name}"
    "S301",    # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "S303",    # Use of insecure MD2, MD4, MD5, or SHA1 hash function
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "TD002",   # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401", # Unused imports
]
"**/{scripts}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "T20",     # flake8-print
]
"**/{tests}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "S101",    # Use of assert detected
    "SLF001",  # Private member accessed: `{name}`
    "T20",     # flake8-print
    "TRY301",  # Abstract `raise` to an inner function
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-branches = 18
